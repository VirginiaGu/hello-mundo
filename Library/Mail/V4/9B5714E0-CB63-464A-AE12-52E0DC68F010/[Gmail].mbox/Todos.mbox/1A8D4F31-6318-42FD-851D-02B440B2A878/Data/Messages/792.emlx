17398     
From: sayde gutierrez <sayde.gutierrez92@gmail.com>
Content-Type: multipart/alternative;
	boundary="Apple-Mail=_B73CE4AD-750D-4E66-8D1B-638C4A842F0D"
Mime-Version: 1.0 (Mac OS X Mail 10.3 \(3273\))
Subject: Internationalization translation
X-Universally-Unique-Identifier: B191F122-4950-491A-838B-39D51862B689
Message-Id: <9CB1C630-0C9A-48DD-BCC5-239C2C8B309C@gmail.com>
Date: Wed, 2 Aug 2017 17:45:54 +0200
To: sayde.gutierrez92@gmail.com


--Apple-Mail=_B73CE4AD-750D-4E66-8D1B-638C4A842F0D
Content-Transfer-Encoding: quoted-printable
Content-Type: text/plain;
	charset=utf-8

Internationalization translation

If you do not use internationalization USE_I18N =3D true

Python
Standard  function gettext()

Django=20
ugettext() use a single name foe every extrapolated variable included in =
the literal
Particular file ugettext_lazy()

Appropriate translation function with/without_()

Avoid the problem with _()

Contextual markers
Two meanings
django.utils.translation.pgettext()
Django.utils.translation.npgettext()
Import pgettext

When the string needs pluralization=20
The context will appear on the msgctxt line

=E2=80=A6=E2=80=A6=E2=80=A6=E2=80=A6=E2=80=A6.
Lazy translation, when use them=20

Model fields and relationships verbose_name and help_ text
Translate    help text   of  The name field=20

Model verbose name values
Verbose_name and verbose_name_plural

Model methods short_description    attributes values


UGETTEXT GUION LAZY() DOESN NOT HOW TO CONVERT ITSELF TO BYTESTRING=20
USE UNICODE STRING INSIDE A BYTESTRING.
PUT A UNICODE PROXY INTO A UNICODE STRING =E2=80=A6.


FORMAT
django.utils.text format guion lazy() runs str.format()

LOCALIZED NAMES OF LANGUAGES
get _language_info()          provides detailed information about =
languages
Source of the language information django.conf.locale=20

if the translations require strings with variables (placeholders), use =
{% blocktrans %}
The blocktrans tag allows you to mark complex sentences consisting of =
literals and variable
Content for translation by making use placeholders=E2=80=A6=20
{% for %}  or  {% if %} are not allowed inside a blocktrans tag.
count  will be the one used to select the right plural form.
Specify singular and plural forms separating them with {% plural %} tag=20=

within the {% blocktrans %} and {% endblocktrans %} tags

{% trans %} supports contextual markers using the context keyword
{% trans May context month name %}
Django does not support custom plural equation in po files.
PLURAL IN DJANGO IS djando/conf/locate/<lang_code>/LC_MESSAGES/django.po
PLURAL IN ALL OTHER PO FIES ARE IGNORED.=

--Apple-Mail=_B73CE4AD-750D-4E66-8D1B-638C4A842F0D
Content-Transfer-Encoding: quoted-printable
Content-Type: text/html;
	charset=utf-8

<html><head><meta http-equiv=3D"Content-Type" content=3D"text/html =
charset=3Dutf-8"></head><body style=3D"word-wrap: break-word; =
-webkit-nbsp-mode: space; -webkit-line-break: after-white-space;" =
class=3D""><div class=3D""><p style=3D"margin: 0.0px 0.0px 0.0px 0.0px" =
class=3D""><font face=3D"Helvetica Neue" size=3D"3" color=3D"#454545" =
style=3D"font: 12.0px 'Helvetica Neue'; color: #454545" =
class=3D"">Internationalization translation</font></p>
<p style=3D"margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px 'Helvetica =
Neue'; color: #454545; min-height: 14.0px" class=3D""><br class=3D""></p>
<p style=3D"margin: 0.0px 0.0px 0.0px 0.0px" class=3D""><font =
face=3D"Helvetica Neue" size=3D"3" color=3D"#454545" style=3D"font: =
12.0px 'Helvetica Neue'; color: #454545" class=3D"">If you do not use =
internationalization USE_I18N =3D true</font></p>
<p style=3D"margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px 'Helvetica =
Neue'; color: #454545; min-height: 14.0px" class=3D""><br class=3D""></p>
<p style=3D"margin: 0.0px 0.0px 0.0px 0.0px" class=3D""><font =
face=3D"Helvetica Neue" size=3D"3" color=3D"#454545" style=3D"font: =
12.0px 'Helvetica Neue'; color: #454545" class=3D"">Python</font></p>
<p style=3D"margin: 0.0px 0.0px 0.0px 0.0px" class=3D""><font =
face=3D"Helvetica Neue" size=3D"3" color=3D"#454545" style=3D"font: =
12.0px 'Helvetica Neue'; color: #454545" class=3D"">Standard<span =
class=3D"Apple-converted-space">&nbsp; </span>function =
gettext()</font></p>
<p style=3D"margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px 'Helvetica =
Neue'; color: #454545; min-height: 14.0px" class=3D""><br class=3D""></p>
<p style=3D"margin: 0.0px 0.0px 0.0px 0.0px" class=3D""><font =
face=3D"Helvetica Neue" size=3D"3" color=3D"#454545" style=3D"font: =
12.0px 'Helvetica Neue'; color: #454545" class=3D"">Django<span =
class=3D"Apple-converted-space">&nbsp;</span></font></p>
<p style=3D"margin: 0.0px 0.0px 0.0px 0.0px" class=3D""><font =
face=3D"Helvetica Neue" size=3D"3" color=3D"#454545" style=3D"font: =
12.0px 'Helvetica Neue'; color: #454545" class=3D"">ugettext() use a =
single name foe every extrapolated variable included in the =
literal</font></p>
<p style=3D"margin: 0.0px 0.0px 0.0px 0.0px" class=3D""><font =
face=3D"Helvetica Neue" size=3D"3" color=3D"#454545" style=3D"font: =
12.0px 'Helvetica Neue'; color: #454545" class=3D"">Particular file =
ugettext_lazy()</font></p>
<p style=3D"margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px 'Helvetica =
Neue'; color: #454545; min-height: 14.0px" class=3D""><br class=3D""></p>
<p style=3D"margin: 0.0px 0.0px 0.0px 0.0px" class=3D""><font =
face=3D"Helvetica Neue" size=3D"3" color=3D"#454545" style=3D"font: =
12.0px 'Helvetica Neue'; color: #454545" class=3D"">Appropriate =
translation function with/without_()</font></p>
<p style=3D"margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px 'Helvetica =
Neue'; color: #454545; min-height: 14.0px" class=3D""><br class=3D""></p>
<p style=3D"margin: 0.0px 0.0px 0.0px 0.0px" class=3D""><font =
face=3D"Helvetica Neue" size=3D"3" color=3D"#454545" style=3D"font: =
12.0px 'Helvetica Neue'; color: #454545" class=3D"">Avoid the problem =
with _()</font></p>
<p style=3D"margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px 'Helvetica =
Neue'; color: #454545; min-height: 14.0px" class=3D""><br class=3D""></p>
<p style=3D"margin: 0.0px 0.0px 0.0px 0.0px" class=3D""><font =
face=3D"Helvetica Neue" size=3D"3" color=3D"#454545" style=3D"font: =
12.0px 'Helvetica Neue'; color: #454545" class=3D"">Contextual =
markers</font></p>
<p style=3D"margin: 0.0px 0.0px 0.0px 0.0px" class=3D""><font =
face=3D"Helvetica Neue" size=3D"3" color=3D"#454545" style=3D"font: =
12.0px 'Helvetica Neue'; color: #454545" class=3D"">Two =
meanings</font></p>
<p style=3D"margin: 0.0px 0.0px 0.0px 0.0px" class=3D""><font =
face=3D"Helvetica Neue" size=3D"3" color=3D"#454545" style=3D"font: =
12.0px 'Helvetica Neue'; color: #454545" =
class=3D"">django.utils.translation.pgettext()</font></p>
<p style=3D"margin: 0.0px 0.0px 0.0px 0.0px" class=3D""><font =
face=3D"Helvetica Neue" size=3D"3" color=3D"#454545" style=3D"font: =
12.0px 'Helvetica Neue'; color: #454545" =
class=3D"">Django.utils.translation.npgettext()</font></p>
<p style=3D"margin: 0.0px 0.0px 0.0px 0.0px" class=3D""><font =
face=3D"Helvetica Neue" size=3D"3" color=3D"#454545" style=3D"font: =
12.0px 'Helvetica Neue'; color: #454545" class=3D"">Import =
pgettext</font></p>
<p style=3D"margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px 'Helvetica =
Neue'; color: #454545; min-height: 14.0px" class=3D""><br class=3D""></p>
<p style=3D"margin: 0.0px 0.0px 0.0px 0.0px" class=3D""><font =
face=3D"Helvetica Neue" size=3D"3" color=3D"#454545" style=3D"font: =
12.0px 'Helvetica Neue'; color: #454545" class=3D"">When the string =
needs pluralization<span =
class=3D"Apple-converted-space">&nbsp;</span></font></p>
<p style=3D"margin: 0.0px 0.0px 0.0px 0.0px" class=3D""><font =
face=3D"Helvetica Neue" size=3D"3" color=3D"#454545" style=3D"font: =
12.0px 'Helvetica Neue'; color: #454545" class=3D"">The context will =
appear on the msgctxt line</font></p>
<p style=3D"margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px 'Helvetica =
Neue'; color: #454545; min-height: 14.0px" class=3D""><br class=3D""></p>
<p style=3D"margin: 0.0px 0.0px 0.0px 0.0px" class=3D""><font =
face=3D"Helvetica Neue" size=3D"3" color=3D"#454545" style=3D"font: =
12.0px 'Helvetica Neue'; color: #454545" =
class=3D"">=E2=80=A6=E2=80=A6=E2=80=A6=E2=80=A6=E2=80=A6.</font></p>
<p style=3D"margin: 0.0px 0.0px 0.0px 0.0px" class=3D""><font =
face=3D"Helvetica Neue" size=3D"3" color=3D"#454545" style=3D"font: =
12.0px 'Helvetica Neue'; color: #454545" class=3D"">Lazy translation, =
when use them<span =
class=3D"Apple-converted-space">&nbsp;</span></font></p>
<p style=3D"margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px 'Helvetica =
Neue'; color: #454545; min-height: 14.0px" class=3D""><br class=3D""></p>
<p style=3D"margin: 0.0px 0.0px 0.0px 0.0px" class=3D""><font =
face=3D"Helvetica Neue" size=3D"3" color=3D"#454545" style=3D"font: =
12.0px 'Helvetica Neue'; color: #454545" class=3D"">Model fields and =
relationships verbose_name and help_ text</font></p>
<p style=3D"margin: 0.0px 0.0px 0.0px 0.0px" class=3D""><font =
face=3D"Helvetica Neue" size=3D"3" color=3D"#454545" style=3D"font: =
12.0px 'Helvetica Neue'; color: #454545" class=3D"">Translate<span =
class=3D"Apple-converted-space">&nbsp; &nbsp; </span>help text <span =
class=3D"Apple-converted-space">&nbsp; </span>of<span =
class=3D"Apple-converted-space">&nbsp; </span>The name field<span =
class=3D"Apple-converted-space">&nbsp;</span></font></p>
<p style=3D"margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px 'Helvetica =
Neue'; color: #454545; min-height: 14.0px" class=3D""><br class=3D""></p>
<p style=3D"margin: 0.0px 0.0px 0.0px 0.0px" class=3D""><font =
face=3D"Helvetica Neue" size=3D"3" color=3D"#454545" style=3D"font: =
12.0px 'Helvetica Neue'; color: #454545" class=3D"">Model verbose name =
values</font></p>
<p style=3D"margin: 0.0px 0.0px 0.0px 0.0px" class=3D""><font =
face=3D"Helvetica Neue" size=3D"3" color=3D"#454545" style=3D"font: =
12.0px 'Helvetica Neue'; color: #454545" class=3D"">Verbose_name and =
verbose_name_plural</font></p>
<p style=3D"margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px 'Helvetica =
Neue'; color: #454545; min-height: 14.0px" class=3D""><br class=3D""></p>
<p style=3D"margin: 0.0px 0.0px 0.0px 0.0px" class=3D""><font =
face=3D"Helvetica Neue" size=3D"3" color=3D"#454545" style=3D"font: =
12.0px 'Helvetica Neue'; color: #454545" class=3D"">Model methods =
short_description<span class=3D"Apple-converted-space">&nbsp; &nbsp; =
</span>attributes values</font></p>
<p style=3D"margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px 'Helvetica =
Neue'; color: #454545; min-height: 14.0px" class=3D""><br class=3D""></p>
<p style=3D"margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px 'Helvetica =
Neue'; color: #454545; min-height: 14.0px" class=3D""><br class=3D""></p>
<p style=3D"margin: 0.0px 0.0px 0.0px 0.0px" class=3D""><font =
face=3D"Helvetica Neue" size=3D"3" color=3D"#454545" style=3D"font: =
12.0px 'Helvetica Neue'; color: #454545" class=3D"">UGETTEXT GUION =
LAZY() DOESN NOT HOW TO CONVERT ITSELF TO BYTESTRING<span =
class=3D"Apple-converted-space">&nbsp;</span></font></p>
<p style=3D"margin: 0.0px 0.0px 0.0px 0.0px" class=3D""><font =
face=3D"Helvetica Neue" size=3D"3" color=3D"#454545" style=3D"font: =
12.0px 'Helvetica Neue'; color: #454545" class=3D"">USE UNICODE STRING =
INSIDE A BYTESTRING.</font></p>
<p style=3D"margin: 0.0px 0.0px 0.0px 0.0px" class=3D""><font =
face=3D"Helvetica Neue" size=3D"3" color=3D"#454545" style=3D"font: =
12.0px 'Helvetica Neue'; color: #454545" class=3D"">PUT A UNICODE PROXY =
INTO A UNICODE STRING =E2=80=A6.</font></p>
<p style=3D"margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px 'Helvetica =
Neue'; color: #454545; min-height: 14.0px" class=3D""><br class=3D""></p>
<p style=3D"margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px 'Helvetica =
Neue'; color: #454545; min-height: 14.0px" class=3D""><br class=3D""></p>
<p style=3D"margin: 0.0px 0.0px 0.0px 0.0px" class=3D""><font =
face=3D"Helvetica Neue" size=3D"3" color=3D"#454545" style=3D"font: =
12.0px 'Helvetica Neue'; color: #454545" class=3D"">FORMAT</font></p>
<p style=3D"margin: 0.0px 0.0px 0.0px 0.0px" class=3D""><font =
face=3D"Helvetica Neue" size=3D"3" color=3D"#454545" style=3D"font: =
12.0px 'Helvetica Neue'; color: #454545" class=3D"">django.utils.text =
format guion lazy() runs str.format()</font></p>
<p style=3D"margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px 'Helvetica =
Neue'; color: #454545; min-height: 14.0px" class=3D""><br class=3D""></p>
<p style=3D"margin: 0.0px 0.0px 0.0px 0.0px" class=3D""><font =
face=3D"Helvetica Neue" size=3D"3" color=3D"#454545" style=3D"font: =
12.0px 'Helvetica Neue'; color: #454545" class=3D"">LOCALIZED NAMES OF =
LANGUAGES</font></p>
<p style=3D"margin: 0.0px 0.0px 0.0px 0.0px" class=3D""><font =
face=3D"Helvetica Neue" size=3D"3" color=3D"#454545" style=3D"font: =
12.0px 'Helvetica Neue'; color: #454545" class=3D"">get =
_language_info()<span class=3D"Apple-converted-space">&nbsp; &nbsp; =
&nbsp; &nbsp; &nbsp; </span>provides detailed information about =
languages</font></p>
<p style=3D"margin: 0.0px 0.0px 0.0px 0.0px" class=3D""><font =
face=3D"Helvetica Neue" size=3D"3" color=3D"#454545" style=3D"font: =
12.0px 'Helvetica Neue'; color: #454545" class=3D"">Source of the =
language information django.conf.locale<span =
class=3D"Apple-converted-space">&nbsp;</span></font></p>
<p style=3D"margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px 'Helvetica =
Neue'; color: #454545; min-height: 14.0px" class=3D""><br class=3D""></p>
<p style=3D"margin: 0.0px 0.0px 0.0px 0.0px" class=3D""><font =
face=3D"Helvetica Neue" size=3D"3" color=3D"#454545" style=3D"font: =
12.0px 'Helvetica Neue'; color: #454545" class=3D"">if the translations =
require strings with variables (placeholders), use {% blocktrans =
%}</font></p>
<p style=3D"margin: 0.0px 0.0px 0.0px 0.0px" class=3D""><font =
face=3D"Helvetica Neue" size=3D"3" color=3D"#454545" style=3D"font: =
12.0px 'Helvetica Neue'; color: #454545" class=3D"">The blocktrans tag =
allows you to mark complex sentences consisting of literals and =
variable</font></p>
<p style=3D"margin: 0.0px 0.0px 0.0px 0.0px" class=3D""><font =
face=3D"Helvetica Neue" size=3D"3" color=3D"#454545" style=3D"font: =
12.0px 'Helvetica Neue'; color: #454545" class=3D"">Content for =
translation by making use placeholders=E2=80=A6<span =
class=3D"Apple-converted-space">&nbsp;</span></font></p>
<p style=3D"margin: 0.0px 0.0px 0.0px 0.0px" class=3D""><font =
face=3D"Helvetica Neue" size=3D"3" color=3D"#454545" style=3D"font: =
12.0px 'Helvetica Neue'; color: #454545" class=3D"">{% for %}<span =
class=3D"Apple-converted-space">&nbsp; </span>or<span =
class=3D"Apple-converted-space">&nbsp; </span>{% if %} are not allowed =
inside a blocktrans tag.</font></p>
<p style=3D"margin: 0.0px 0.0px 0.0px 0.0px" class=3D""><font =
face=3D"Helvetica Neue" size=3D"3" color=3D"#454545" style=3D"font: =
12.0px 'Helvetica Neue'; color: #454545" class=3D"">count<span =
class=3D"Apple-converted-space">&nbsp; </span>will be the one used to =
select the right plural form.</font></p>
<p style=3D"margin: 0.0px 0.0px 0.0px 0.0px" class=3D""><font =
face=3D"Helvetica Neue" size=3D"3" color=3D"#454545" style=3D"font: =
12.0px 'Helvetica Neue'; color: #454545" class=3D"">Specify singular and =
plural forms separating them with {% plural %} tag<span =
class=3D"Apple-converted-space">&nbsp;</span></font></p>
<p style=3D"margin: 0.0px 0.0px 0.0px 0.0px" class=3D""><font =
face=3D"Helvetica Neue" size=3D"3" color=3D"#454545" style=3D"font: =
12.0px 'Helvetica Neue'; color: #454545" class=3D"">within the {% =
blocktrans %} and {% endblocktrans %} tags</font></p>
<p style=3D"margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px 'Helvetica =
Neue'; color: #454545; min-height: 14.0px" class=3D""><br class=3D""></p>
<p style=3D"margin: 0.0px 0.0px 0.0px 0.0px" class=3D""><font =
face=3D"Helvetica Neue" size=3D"3" color=3D"#454545" style=3D"font: =
12.0px 'Helvetica Neue'; color: #454545" class=3D"">{% trans %} supports =
contextual markers using the context keyword</font></p>
<p style=3D"margin: 0.0px 0.0px 0.0px 0.0px" class=3D""><font =
face=3D"Helvetica Neue" size=3D"3" color=3D"#454545" style=3D"font: =
12.0px 'Helvetica Neue'; color: #454545" class=3D"">{% trans =
</font><font face=3D"Helvetica Neue" size=3D"4" color=3D"#454545" =
style=3D"font: 14.0px 'Helvetica Neue'; color: #454545" class=3D"">May =
context month name </font><font face=3D"Helvetica Neue" size=3D"3" =
color=3D"#454545" style=3D"font: 12.0px 'Helvetica Neue'; color: =
#454545" class=3D"">%}</font></p>
<p style=3D"margin: 0.0px 0.0px 0.0px 0.0px" class=3D""><font =
face=3D"Helvetica Neue" size=3D"3" color=3D"#454545" style=3D"font: =
12.0px 'Helvetica Neue'; color: #454545" class=3D"">Django does not =
support custom plural equation in po files.</font></p>
<p style=3D"margin: 0.0px 0.0px 0.0px 0.0px" class=3D""><font =
face=3D"Helvetica Neue" size=3D"3" color=3D"#454545" style=3D"font: =
12.0px 'Helvetica Neue'; color: #454545" class=3D"">PLURAL IN DJANGO IS =
djando/conf/locate/&lt;lang_code&gt;/LC_MESSAGES/django.po</font></p>
<p style=3D"margin: 0.0px 0.0px 0.0px 0.0px" class=3D""><font =
face=3D"Helvetica Neue" size=3D"3" color=3D"#454545" style=3D"font: =
12.0px 'Helvetica Neue'; color: #454545" class=3D"">PLURAL IN ALL OTHER =
PO FIES ARE IGNORED.</font></p>
</div></body></html>=

--Apple-Mail=_B73CE4AD-750D-4E66-8D1B-638C4A842F0D--
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>date-last-viewed</key>
	<integer>0</integer>
	<key>date-received</key>
	<integer>1501688754</integer>
	<key>flags</key>
	<integer>8623685632</integer>
	<key>gmail-label-ids</key>
	<array>
		<integer>3</integer>
		<integer>8</integer>
		<integer>7</integer>
	</array>
	<key>remote-id</key>
	<string>10631</string>
</dict>
</plist>
